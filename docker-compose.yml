x-superset-user: &superset-user root
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  # - ./superset:/app/superset
  - ./docker/superset_config.py:/app/pythonpath/superset_config.py

services:
  db:
    container_name: postgres
    image: postgres:14.18
    ports:
      - 5000:5432
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: db_user
      POSTGRES_PASSWORD: db_password
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      # the following is to make postgres recognise the airflow_init.sql script and execute is before moving on to airflow set up
      - ./postgres/airflow_init.sql:/docker-entrypoint-initdb.d/airflow_init.sql
      - ./postgres/superset_init.sql:/docker-entrypoint-initdb.d/superset_init.sql
    networks:
      - my-network

  af:
    container_name: airflow
    image: apache/airflow:3.0.0
    ports:
      - 8000:8080
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@db:5432/airflow_db
    volumes:
      - ./src/airflow/dags:/opt/airflow/dags
      - ./src/python_scripts:/opt/airflow/python_scripts
      - /var/run/docker.sock:/var/run/docker.sock # this is to establish connection with our sock to docker sock
    group_add: # this is done to provide permission to access and run the docker.sock
      - '1001' # checked using stat -c '%g' /var/run/docker.sock
    depends_on: # to start after db set up
      - db
    networks:
      - my-network
    command: > # this is to migrate the necessary Airflow metadata database schema && spins up a local webserver, scheduler, and runs initialization for development
      bash -c "airflow db migrate && airflow standalone"

  dbt:
    container_name: dbt
    image: ghcr.io/dbt-labs/dbt-postgres:1.9.latest
    volumes:
      - ./dbt/dbt_project:/usr/app
      - ./dbt:/root/.dbt
    working_dir: /usr/app
    environment:
      DBT_PROFILES_DIR: 
    depends_on: 
      - db
    networks:
      - my-network
    command: >
      run
  
  superset-init:
    image: apache/superset:3.0.0-py310
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - path: docker/.env # default
        required: true
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    user: *superset-user
    volumes: *superset-volumes
    environment:
      # SUPERSET_LOAD_EXAMPLES: "${SUPERSET_LOAD_EXAMPLES:-yes}"
      SUPERSET_LOAD_EXAMPLES: "no"
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
      DATABASE_DB: "${POSTGRES_DB:-superset_db}"
    healthcheck:
      disable: true
    networks:
      - my-network
  
  superset:
    env_file:
      - path: docker/.env # default
        required: true
    image: apache/superset:3.0.0-py310
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app"]
    restart: unless-stopped
    ports:
      - 8088:8088
    user: *superset-user
    depends_on:
      superset-init:
        condition: service_completed_successfully
    volumes: *superset-volumes
    environment:
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
      DATABASE_DB: "${POSTGRES_DB:-superset_db}"
    networks:
      - my-network

  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis:/data
    networks:
      - my-network

networks: # to communicate internally with other containers
  my-network:
    driver: bridge

volumes:
  redis:
    external: false